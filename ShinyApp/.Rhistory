upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
View(upperBway)
View(upperBway)
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"\\UpperBway.csv", row.names = FALSE)
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"\UpperBway.csv", row.names = FALSE)
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
View(ts_data)
View(ts_data)
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <= ts_data[ts_data$SF > mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF > mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF > mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF >= mean(ts_data$SF)]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data$SF >= mean(ts_data$SF)
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <= ts_data[ts_data$SF > mean(ts_data$SF), ]
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <= filter(ts_data, ts_data$SF > mean(ts_data$SF))
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- filter(ts_data, ts_data$SF > mean(ts_data$SF))
upperBway <- ts_data[ts_data$Location == "Upper Bway", ]
write.csv(upperBway,"UpperBway.csv", row.names = FALSE)
greaterThanAvg <- ts_data[ts_data$SF > mean(ts_data$SF) == TRUE]
shiny::runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
shiny::runApp('Desktop/NYC Data Science/Projects/ShinyApp')
library(readr)
Startup_Data <- read_csv("datasets_723212_1257436_CAX_Startup_Data.csv")
View(datasets_723212_1257436_CAX_Startup_Data)
library(readr)
Startup_Data <- read_csv("Desktop/NYC Data Science/Projects/ShinyApp/datasets_723212_1257436_CAX_Startup_Data.csv")
View(datasets_723212_1257436_CAX_Startup_Data)
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
install.packages("wordcloud")
install.packages("wordcloud")
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
View(Startup_Data)
library(readxl)
Failed_Companies <- read_excel("Desktop/NYC Data Science/Projects/ShinyApp/Failed-Companies.xlsx")
View(Failed_Companies)
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
install.packages("memoise")
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
install.packages("tm")
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
View(myCorpus)
View(myCorpus)
View(myCorpus)
View(myCorpus)
View(myDTM)
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyApp')
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
cor(temp$Body.Temp, temp$Heart.Rate)
hist(temp$Body.Temp, prob = T)
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
cor(temp$Body.Temp, temp$Heart.Rate)
hist(temp$Body.Temp, prob = T)
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
plot(temp$Body.Temp, temp$Heart.Rate, col = temp$Gender)
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
cor(temp$Body.Temp, temp$Heart.Rate)
hist(temp$Body.Temp, prob = T)
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
plot(temp$Body.Temp, temp$Heart.Rate, ifelse(col == "Male","blue", "pink"))
temp = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(temp)
sd(temp$Body.Temp)
sd(temp$Heart.Rate)
cor(temp$Body.Temp, temp$Heart.Rate)
hist(temp$Body.Temp, prob = T)
lines(density(temp$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(temp$Heart.Rate), col = "red")
plot(density(temp$Body.Temp[temp$Gender == "Female"]), col = "pink")
lines(density(temp$Body.Temp[temp$Gender == "Male"]), col = "blue")
plot(density(temp$Heart.Rate[temp$Gender == "Male"]), col = "blue")
lines(density(temp$Heart.Rate[temp$Gender == "Female"]), col = "pink")
plot(temp$Body.Temp, temp$Heart.Rate, col = ifelse(temp$Gender == "Male","blue", "pink"))
t.test(temp$Body.Temp, mu = 98.6, alternative = "two.sided")
t.test(temp$Body.Temp[temp$Gender == "Female"],
temp$Body.Temp[temp$Gender == "Male"],
alternative = "two.sided")
t.test(temp$Body.Temp ~ temp$Gender, alternative = "two.sided") #Equivalent.
library(dplyr)
Ma = temp %>% filter(Gender == 'Male')
Fe = temp %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "less")
var.test(temp$Heart.Rate[temp$Gender == "Female"],
temp$Heart.Rate[temp$Gender == "Male"],
alternative = "greater")
boxplot(weight ~ group, data = PlantGrowth)
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
boxplot(weight ~ group, data = PlantGrowth)
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
ggplot(PlantGrowth, aes(x = group, y = weight)) + geom_boxplot(color = c("red", "blue", "green"))
library(ggplot2)
library(datasets)
PlantGrowth
#1 Creating side-by-side boxplots of the data.
boxplot(weight ~ group, data = PlantGrowth)
#2a Calculating the standard deviations of each treatment group.
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
# Use ggplot
ggplot(PlantGrowth, aes(x = group, y = weight))+
geom_boxplot(color = c("red", "blue", "green"))
#Conducting the Bartlett test of homogeneity of variances.
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
#The p-value for this test is > 0.05; we do not have statistical evidence to
#conclude that the variances of the plant treatment groups are different.
#3a One-Way ANOVA - access the equality of means of two or more groups?
# What the relationship between a Two sample T-test and One-way ANOVA,if there are exactly two groups?
summary(aov(weight ~ group, data = PlantGrowth))
# plot(aov(weight ~ group, data = PlantGrowth))
#The p-value for this test is 0.02, which is smaller than our cutoff value of
#0.05; we have evidence to conclude that the average plant weight varies by the
#type of treatment that was applied. This conclusion is valid based on the
#Bartlett test because we determined that the group variances are not statistically
#different from one another.
#3b multiple comparisons
# https://en.wikipedia.org/wiki/Multiple_comparisons_problem
PlantGrowth
boxplot(weight ~ group, data = PlantGrowth)
sd(PlantGrowth$weight[PlantGrowth$group == "ctrl"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt1"])
sd(PlantGrowth$weight[PlantGrowth$group == "trt2"])
ggplot(PlantGrowth, aes(x = group, y = weight)) + geom_boxplot(color = c("red", "blue", "green"))
bartlett.test(PlantGrowth$weight ~ PlantGrowth$group)
summary(aov(weight ~ group, data = PlantGrowth))
str(HairEyeColor)
mosaicplot(HairEyeColor, shade = TRUE)
reduced = HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
reduced.test = chisq.test(reduced)
reduced.test
(reduced.test$observed - reduced.test$expected)^2/reduced.test$expected
reduced.test$observed - reduced.test$expected
tempTable = read.table('https://s3.amazonaws.com/graderdata/Temp.txt', header = TRUE)
summary(tempTable)
sd(tempTable$Body.Temp)
sd(tempTable$Heart.Rate)
cor(tempTable$Body.Temp, tempTable$Heart.Rate)
hist(tempTable$Body.Temp, prob = T)
lines(density(tempTable$Body.Temp), col = "red")
hist(temp$Heart.Rate, prob = TRUE)
lines(density(tempTable$Heart.Rate), col = "red")
plot(density(tempTable$Body.Temp[tempTable$Gender == "Female"]), col = "pink")
lines(density(tempTable$Body.Temp[tempTable$Gender == "Male"]), col = "blue")
plot(density(tempTable$Heart.Rate[tempTable$Gender == "Male"]), col = "blue")
lines(density(tempTable$Heart.Rate[tempTable$Gender == "Female"]), col = "pink")
plot(tempTable$Body.Temp, tempTable$Heart.Rate, col = ifelse(tempTable$Gender == "Male","blue", "pink"))
t.test(tempTable$Body.Temp, mu = 98.6, alternative = "two.sided")
t.test(tempTable$Body.Temp[tempTable$Gender == "Female"],
tempTable$Body.Temp[tempTable$Gender == "Male"],
alternative = "two.sided")
t.test(tempTable$Body.Temp ~ tempTable$Gender, alternative = "two.sided") #Equivalent.
library(dplyr)
Ma = tempTable %>% filter(Gender == 'Male')
Fe = tempTable %>% filter(Gender == 'Female')
avg = numeric()
for(i in 1:10000){
m = sample(Ma$Body.Temp, 65, replace=T)
f = sample(Fe$Body.Temp, 65, replace=T)
avg[i] = mean(f-m)
}
lower_bnd = mean(avg) - 2*sd(avg)
upper_bnd = mean(avg) + 2*sd(avg)
var.test(tempTable$Heart.Rate[tempTable$Gender == "Female"],
tempTable$Heart.Rate[tempTable$Gender == "Male"],
alternative = "less")
var.test(tempTable$Heart.Rate[tempTable$Gender == "Female"],
tempTable$Heart.Rate[tempTable$Gender == "Male"],
alternative = "greater")
str(HairEyeColor)
mosaicplot(HairEyeColor, shade = TRUE)
filteredData = HairEyeColor[,1:2,2]
mosaicplot(HairEyeColor[,1:2,2], shade = TRUE)
filteredData.test = chisq.test(filteredData)
filteredData.test
(filteredData.test$observed - filteredData.test$expected)^2/filteredData.test$expected
filteredData.test$observed - filteredData.test$expected
shiny::runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
library(dplyr)
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
runApp()
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/ShinyAppOldVersion/DataScience/ShinyApp')
shiny::runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
dfSuccessByYearIndustry %>% filter(., dfSuccessByYearIndustry$`Focus functions of company` == "Analytics")
dfSuccessByYearIndustry %>% filter(., `Focus functions of company` == "Analytics")
print(filteredIndustry)
runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
runApp('Desktop/NYC Data Science/Projects/DataScience/ShinyApp')
setwd("~/Desktop/NYC Data Science/Projects/DataScience/ShinyApp")
runApp()
runApp()
runApp()
runApp()
runApp()
View(dfYearDistinct)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dfSuccessByYearIndustry)
runApp()
View(dfYearDistinct)
runApp()
runApp()
View(dfReasonsFailure)
runApp()
runApp()
runApp()
View(dfYearDistinct)
View(dfSuccessByYearIndustry)
View(dfReasonsFailure)
View(dfYearDistinct)
View(Startup_Data)
View(dfReasonsFailure)
View(dfSuccessByYearIndustry)
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Startup_Data)
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
View(D)
runApp()
View(D)
View(D)
runApp()
View(D)
runApp()
runApp()
runApp()
runApp()
runApp()
View(Failed_Companies_Sorted)
View(Startup_Data)
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
View(dfInternetScore)
runApp()
View(dfInternetScore)
runApp()
View(dfInternetScore)
runApp()
View(Startup_Data)
View(dfReasonsFailure)
runApp()
View(dfProductService)
View(Failed_Companies_Sorted)
View(Failed_Companies)
runApp()
View(dfProductService)
runApp()
View(dfProductService)
runApp()
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(p1)
runApp()
runApp()
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(dfAgeOfCompanies)
runApp()
View(dfAgeOfCompanies)
runApp()
runApp()
runApp()
View(dfAgeOfCompanies)
runApp()
View(dfAgeOfCompanies)
View(dfAgeOfCompanies)
runApp()
View(dfAgeCompany)
runApp()
View(dfAgeCompany)
View(Failed_Companies_Sorted)
View(Startup_Data)
View(dfAgeCompany)
runApp()
runApp()
runApp()
View(dfAgeCompany)
runApp()
View(dfAgeCompany)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Startup_Data)
runApp()
runApp()
runApp()
